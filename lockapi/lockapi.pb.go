// Code generated by protoc-gen-go.
// source: lockapi.proto
// DO NOT EDIT!

/*
Package lockapi is a generated protocol buffer package.

It is generated from these files:
	lockapi.proto

It has these top-level messages:
	LockName
	LockState
	LockResult
*/
package lockapi

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type LockName struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *LockName) Reset()                    { *m = LockName{} }
func (m *LockName) String() string            { return proto.CompactTextString(m) }
func (*LockName) ProtoMessage()               {}
func (*LockName) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *LockName) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type LockState struct {
	Name     string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
	IsLocked bool   `protobuf:"varint,2,opt,name=is_locked,json=isLocked" json:"is_locked,omitempty"`
}

func (m *LockState) Reset()                    { *m = LockState{} }
func (m *LockState) String() string            { return proto.CompactTextString(m) }
func (*LockState) ProtoMessage()               {}
func (*LockState) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *LockState) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *LockState) GetIsLocked() bool {
	if m != nil {
		return m.IsLocked
	}
	return false
}

type LockResult struct {
	Success bool `protobuf:"varint,1,opt,name=success" json:"success,omitempty"`
}

func (m *LockResult) Reset()                    { *m = LockResult{} }
func (m *LockResult) String() string            { return proto.CompactTextString(m) }
func (*LockResult) ProtoMessage()               {}
func (*LockResult) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LockResult) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

func init() {
	proto.RegisterType((*LockName)(nil), "lockapi.LockName")
	proto.RegisterType((*LockState)(nil), "lockapi.LockState")
	proto.RegisterType((*LockResult)(nil), "lockapi.LockResult")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Locking service

type LockingClient interface {
	// Check if the given entry is locked.
	IsLocked(ctx context.Context, in *LockName, opts ...grpc.CallOption) (*LockState, error)
	// Lock the given entry.
	Lock(ctx context.Context, in *LockName, opts ...grpc.CallOption) (*LockResult, error)
	// Unlock the given entry.
	Unlock(ctx context.Context, in *LockName, opts ...grpc.CallOption) (*LockResult, error)
}

type lockingClient struct {
	cc *grpc.ClientConn
}

func NewLockingClient(cc *grpc.ClientConn) LockingClient {
	return &lockingClient{cc}
}

func (c *lockingClient) IsLocked(ctx context.Context, in *LockName, opts ...grpc.CallOption) (*LockState, error) {
	out := new(LockState)
	err := grpc.Invoke(ctx, "/lockapi.Locking/IsLocked", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockingClient) Lock(ctx context.Context, in *LockName, opts ...grpc.CallOption) (*LockResult, error) {
	out := new(LockResult)
	err := grpc.Invoke(ctx, "/lockapi.Locking/Lock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *lockingClient) Unlock(ctx context.Context, in *LockName, opts ...grpc.CallOption) (*LockResult, error) {
	out := new(LockResult)
	err := grpc.Invoke(ctx, "/lockapi.Locking/Unlock", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Locking service

type LockingServer interface {
	// Check if the given entry is locked.
	IsLocked(context.Context, *LockName) (*LockState, error)
	// Lock the given entry.
	Lock(context.Context, *LockName) (*LockResult, error)
	// Unlock the given entry.
	Unlock(context.Context, *LockName) (*LockResult, error)
}

func RegisterLockingServer(s *grpc.Server, srv LockingServer) {
	s.RegisterService(&_Locking_serviceDesc, srv)
}

func _Locking_IsLocked_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockingServer).IsLocked(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lockapi.Locking/IsLocked",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockingServer).IsLocked(ctx, req.(*LockName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locking_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockingServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lockapi.Locking/Lock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockingServer).Lock(ctx, req.(*LockName))
	}
	return interceptor(ctx, in, info, handler)
}

func _Locking_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockName)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LockingServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/lockapi.Locking/Unlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LockingServer).Unlock(ctx, req.(*LockName))
	}
	return interceptor(ctx, in, info, handler)
}

var _Locking_serviceDesc = grpc.ServiceDesc{
	ServiceName: "lockapi.Locking",
	HandlerType: (*LockingServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IsLocked",
			Handler:    _Locking_IsLocked_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _Locking_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _Locking_Unlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "lockapi.proto",
}

func init() { proto.RegisterFile("lockapi.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 199 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcd, 0xc9, 0x4f, 0xce,
	0x4e, 0x2c, 0xc8, 0xd4, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0xe4, 0xb8,
	0x38, 0x7c, 0xf2, 0x93, 0xb3, 0xfd, 0x12, 0x73, 0x53, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73,
	0x53, 0x25, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x1b, 0x2e, 0x4e, 0x90, 0x7c,
	0x70, 0x49, 0x62, 0x09, 0x56, 0x05, 0x42, 0xd2, 0x5c, 0x9c, 0x99, 0xc5, 0xf1, 0x20, 0xe3, 0x52,
	0x53, 0x24, 0x98, 0x14, 0x18, 0x35, 0x38, 0x82, 0x38, 0x32, 0x8b, 0x7d, 0xc0, 0x7c, 0x25, 0x35,
	0x2e, 0x2e, 0x10, 0x2b, 0x28, 0xb5, 0xb8, 0x34, 0xa7, 0x44, 0x48, 0x82, 0x8b, 0xbd, 0xb8, 0x34,
	0x39, 0x39, 0xb5, 0xb8, 0x18, 0x6c, 0x02, 0x47, 0x10, 0x8c, 0x6b, 0xb4, 0x84, 0x91, 0x8b, 0x1d,
	0xa4, 0x30, 0x33, 0x2f, 0x5d, 0xc8, 0x98, 0x8b, 0xc3, 0x13, 0xaa, 0x5f, 0x48, 0x50, 0x0f, 0xe6,
	0x6c, 0x98, 0x23, 0xa5, 0x84, 0x50, 0x84, 0xc0, 0xee, 0x52, 0x62, 0x10, 0x32, 0xe0, 0x62, 0x01,
	0x71, 0xb1, 0x69, 0x10, 0x46, 0x11, 0x82, 0x38, 0x45, 0x89, 0x41, 0xc8, 0x88, 0x8b, 0x2d, 0x34,
	0x2f, 0x87, 0x24, 0x3d, 0x49, 0x6c, 0xe0, 0xc0, 0x33, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x7b,
	0x31, 0xe3, 0xe8, 0x4d, 0x01, 0x00, 0x00,
}
