# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: lockapi.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='lockapi.proto',
  package='lockapi',
  syntax='proto3',
  serialized_pb=_b('\n\rlockapi.proto\x12\x07lockapi\"\x18\n\x08LockName\x12\x0c\n\x04name\x18\x01 \x01(\t\",\n\tLockState\x12\x0c\n\x04name\x18\x01 \x01(\t\x12\x11\n\tis_locked\x18\x02 \x01(\x08\"\x1d\n\nLockResult\x12\x0f\n\x07success\x18\x01 \x01(\x08\x32\xa4\x01\n\x07Locking\x12\x33\n\x08IsLocked\x12\x11.lockapi.LockName\x1a\x12.lockapi.LockState\"\x00\x12\x30\n\x04Lock\x12\x11.lockapi.LockName\x1a\x13.lockapi.LockResult\"\x00\x12\x32\n\x06Unlock\x12\x11.lockapi.LockName\x1a\x13.lockapi.LockResult\"\x00\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_LOCKNAME = _descriptor.Descriptor(
  name='LockName',
  full_name='lockapi.LockName',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='lockapi.LockName.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=26,
  serialized_end=50,
)


_LOCKSTATE = _descriptor.Descriptor(
  name='LockState',
  full_name='lockapi.LockState',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='name', full_name='lockapi.LockState.name', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='is_locked', full_name='lockapi.LockState.is_locked', index=1,
      number=2, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=52,
  serialized_end=96,
)


_LOCKRESULT = _descriptor.Descriptor(
  name='LockResult',
  full_name='lockapi.LockResult',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='success', full_name='lockapi.LockResult.success', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=98,
  serialized_end=127,
)

DESCRIPTOR.message_types_by_name['LockName'] = _LOCKNAME
DESCRIPTOR.message_types_by_name['LockState'] = _LOCKSTATE
DESCRIPTOR.message_types_by_name['LockResult'] = _LOCKRESULT

LockName = _reflection.GeneratedProtocolMessageType('LockName', (_message.Message,), dict(
  DESCRIPTOR = _LOCKNAME,
  __module__ = 'lockapi_pb2'
  # @@protoc_insertion_point(class_scope:lockapi.LockName)
  ))
_sym_db.RegisterMessage(LockName)

LockState = _reflection.GeneratedProtocolMessageType('LockState', (_message.Message,), dict(
  DESCRIPTOR = _LOCKSTATE,
  __module__ = 'lockapi_pb2'
  # @@protoc_insertion_point(class_scope:lockapi.LockState)
  ))
_sym_db.RegisterMessage(LockState)

LockResult = _reflection.GeneratedProtocolMessageType('LockResult', (_message.Message,), dict(
  DESCRIPTOR = _LOCKRESULT,
  __module__ = 'lockapi_pb2'
  # @@protoc_insertion_point(class_scope:lockapi.LockResult)
  ))
_sym_db.RegisterMessage(LockResult)


try:
  # THESE ELEMENTS WILL BE DEPRECATED.
  # Please use the generated *_pb2_grpc.py files instead.
  import grpc
  from grpc.framework.common import cardinality
  from grpc.framework.interfaces.face import utilities as face_utilities
  from grpc.beta import implementations as beta_implementations
  from grpc.beta import interfaces as beta_interfaces


  class LockingStub(object):
    """Lock interface.
    """

    def __init__(self, channel):
      """Constructor.

      Args:
        channel: A grpc.Channel.
      """
      self.IsLocked = channel.unary_unary(
          '/lockapi.Locking/IsLocked',
          request_serializer=LockName.SerializeToString,
          response_deserializer=LockState.FromString,
          )
      self.Lock = channel.unary_unary(
          '/lockapi.Locking/Lock',
          request_serializer=LockName.SerializeToString,
          response_deserializer=LockResult.FromString,
          )
      self.Unlock = channel.unary_unary(
          '/lockapi.Locking/Unlock',
          request_serializer=LockName.SerializeToString,
          response_deserializer=LockResult.FromString,
          )


  class LockingServicer(object):
    """Lock interface.
    """

    def IsLocked(self, request, context):
      """Check if the given entry is locked.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Lock(self, request, context):
      """Lock the given entry.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')

    def Unlock(self, request, context):
      """Unlock the given entry.
      """
      context.set_code(grpc.StatusCode.UNIMPLEMENTED)
      context.set_details('Method not implemented!')
      raise NotImplementedError('Method not implemented!')


  def add_LockingServicer_to_server(servicer, server):
    rpc_method_handlers = {
        'IsLocked': grpc.unary_unary_rpc_method_handler(
            servicer.IsLocked,
            request_deserializer=LockName.FromString,
            response_serializer=LockState.SerializeToString,
        ),
        'Lock': grpc.unary_unary_rpc_method_handler(
            servicer.Lock,
            request_deserializer=LockName.FromString,
            response_serializer=LockResult.SerializeToString,
        ),
        'Unlock': grpc.unary_unary_rpc_method_handler(
            servicer.Unlock,
            request_deserializer=LockName.FromString,
            response_serializer=LockResult.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        'lockapi.Locking', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


  class BetaLockingServicer(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Lock interface.
    """
    def IsLocked(self, request, context):
      """Check if the given entry is locked.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Lock(self, request, context):
      """Lock the given entry.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)
    def Unlock(self, request, context):
      """Unlock the given entry.
      """
      context.code(beta_interfaces.StatusCode.UNIMPLEMENTED)


  class BetaLockingStub(object):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This class was generated
    only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0."""
    """Lock interface.
    """
    def IsLocked(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Check if the given entry is locked.
      """
      raise NotImplementedError()
    IsLocked.future = None
    def Lock(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Lock the given entry.
      """
      raise NotImplementedError()
    Lock.future = None
    def Unlock(self, request, timeout, metadata=None, with_call=False, protocol_options=None):
      """Unlock the given entry.
      """
      raise NotImplementedError()
    Unlock.future = None


  def beta_create_Locking_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_deserializers = {
      ('lockapi.Locking', 'IsLocked'): LockName.FromString,
      ('lockapi.Locking', 'Lock'): LockName.FromString,
      ('lockapi.Locking', 'Unlock'): LockName.FromString,
    }
    response_serializers = {
      ('lockapi.Locking', 'IsLocked'): LockState.SerializeToString,
      ('lockapi.Locking', 'Lock'): LockResult.SerializeToString,
      ('lockapi.Locking', 'Unlock'): LockResult.SerializeToString,
    }
    method_implementations = {
      ('lockapi.Locking', 'IsLocked'): face_utilities.unary_unary_inline(servicer.IsLocked),
      ('lockapi.Locking', 'Lock'): face_utilities.unary_unary_inline(servicer.Lock),
      ('lockapi.Locking', 'Unlock'): face_utilities.unary_unary_inline(servicer.Unlock),
    }
    server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
    return beta_implementations.server(method_implementations, options=server_options)


  def beta_create_Locking_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
    """The Beta API is deprecated for 0.15.0 and later.

    It is recommended to use the GA API (classes and functions in this
    file not marked beta) for all further purposes. This function was
    generated only to ease transition from grpcio<0.15.0 to grpcio>=0.15.0"""
    request_serializers = {
      ('lockapi.Locking', 'IsLocked'): LockName.SerializeToString,
      ('lockapi.Locking', 'Lock'): LockName.SerializeToString,
      ('lockapi.Locking', 'Unlock'): LockName.SerializeToString,
    }
    response_deserializers = {
      ('lockapi.Locking', 'IsLocked'): LockState.FromString,
      ('lockapi.Locking', 'Lock'): LockResult.FromString,
      ('lockapi.Locking', 'Unlock'): LockResult.FromString,
    }
    cardinalities = {
      'IsLocked': cardinality.Cardinality.UNARY_UNARY,
      'Lock': cardinality.Cardinality.UNARY_UNARY,
      'Unlock': cardinality.Cardinality.UNARY_UNARY,
    }
    stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
    return beta_implementations.dynamic_stub(channel, 'lockapi.Locking', cardinalities, options=stub_options)
except ImportError:
  pass
# @@protoc_insertion_point(module_scope)
