# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

import locking_pb2 as locking__pb2


class LockingStub(object):
  """Lock interface.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.IsLocked = channel.unary_unary(
        '/locking.Locking/IsLocked',
        request_serializer=locking__pb2.LockName.SerializeToString,
        response_deserializer=locking__pb2.LockState.FromString,
        )
    self.Lock = channel.unary_unary(
        '/locking.Locking/Lock',
        request_serializer=locking__pb2.LockName.SerializeToString,
        response_deserializer=locking__pb2.LockResult.FromString,
        )
    self.Unlock = channel.unary_unary(
        '/locking.Locking/Unlock',
        request_serializer=locking__pb2.LockName.SerializeToString,
        response_deserializer=locking__pb2.LockResult.FromString,
        )


class LockingServicer(object):
  """Lock interface.
  """

  def IsLocked(self, request, context):
    """Check if the given entry is locked.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Lock(self, request, context):
    """Lock the given entry.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Unlock(self, request, context):
    """Unlock the given entry.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_LockingServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'IsLocked': grpc.unary_unary_rpc_method_handler(
          servicer.IsLocked,
          request_deserializer=locking__pb2.LockName.FromString,
          response_serializer=locking__pb2.LockState.SerializeToString,
      ),
      'Lock': grpc.unary_unary_rpc_method_handler(
          servicer.Lock,
          request_deserializer=locking__pb2.LockName.FromString,
          response_serializer=locking__pb2.LockResult.SerializeToString,
      ),
      'Unlock': grpc.unary_unary_rpc_method_handler(
          servicer.Unlock,
          request_deserializer=locking__pb2.LockName.FromString,
          response_serializer=locking__pb2.LockResult.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'locking.Locking', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
